
############ SET SHELL ############
SHELL=/bin/bash -e -o pipefail

# DEBUG used by docker-compose for build environment
export DEBUG := False

###################################
######## PROJECT SETTINGS #########
###################################
export PROJECT_NAME := myportfolio
export DOCKER_REGISTRY := docker.io
export DOCKER_USER := gbournique

BUILD_COMPOSE_FILE := build-images/docker-compose.yml
BUILD_ARGS = -p $(PROJECT_NAME) -f $(BUILD_COMPOSE_FILE)
PROD_COMPOSE_FILE := docker-deployment/docker-compose.yml
PROD_ARGS = -p $(PROJECT_NAME) -f $(PROD_COMPOSE_FILE)

DOCKER_PASSWORD ?= $(shell bash -c 'read -s -p "Password: " pwd; echo $$pwd')

APP_CONTAINER_ID := $(shell echo $$(docker ps --filter "name=app" -q))
IMAGES_IDS := $(shell echo $$(docker images $(PROJECT_NAME)_* -q))


###########################
######## COSMETICS ########
###########################
RED := "\e[1;31m"
YELLOW := "\e[1;33m"
GREEN := "\033[32m"
NC := "\e[0m"
INFO := @bash -c 'printf $(YELLOW); echo "=> $$1"; printf $(NC)' MESSAGE
SUCCESS := @bash -c 'printf $(GREEN); echo "[SUCCESS] $$1"; printf $(NC)' MESSAGE
WARNING := @bash -c 'printf $(RED); echo "[WARNING] $$1"; printf $(NC)' MESSAGE


###################################
### ENV VARIABLES AND FUNCTIONS ###
###################################
# App version settings
# COMMIT_TIMESTAMP := $(shell echo $$(git log -1 --pretty='format:%cd' --date='format:%Y%m%d%H%M%S' 2>/dev/null))
# COMMIT_ID := $(shell echo $$(git rev-parse --short HEAD 2>/dev/null))
# COMMIT_TAG := $(shell echo $$(git tag --points-at HEAD 2>/dev/null))
# export APP_VERSION ?= $(COMMIT_TIMESTAMP).$(COMMIT_ID)$(if $(COMMIT_TAG),.$(COMMIT_TAG),)

# Docker host settings
DOCKER_HOST_IP := $(shell echo $$DOCKER_HOST | awk -F/ '{printf $$3}' | awk -F: '{printf $$1}')
DOCKER_HOST_IP := $(if $(DOCKER_HOST_IP),$(DOCKER_HOST_IP),localhost)

# Dangling image function
# Syntax: $(call clean_dangling_images,<repository>)
clean_dangling_images = docker images -q -f dangling=true -f label=application=$(1) | xargs -I ARGS docker rmi -f ARGS || true

# Port introspection functions
# Syntax: $(call get_port_mapping,<docker-compose-environment>,<service-name>,<internal-port>)
get_raw_port_mapping = $$(docker-compose $(1) ps -q $(2) | xargs -I ID docker port ID $(3))
get_port_mapping = $$(echo $$(IFS=':' read -r -a array <<< "$(call get_raw_port_mapping,$(1),$(2),$(3))" && echo "$${array[1]}"))

#####

# Image and Repository Tag introspection functions
# Syntax: $(call get_image_id,<docker-compose-environment>,<service-name>)
# Syntax: $(call get_repo_tags,<docker-compose-environment>,<service-name>,<fully-qualified-image-name>)
get_container_id = $$(docker-compose $(1) ps -q $(2))
get_image_id = $$(echo $(call get_container_id,$(1),$(2)) | xargs -I ARGS docker inspect -f '{{ .Image }}' ARGS)
get_container_state = $$(echo $(call get_container_id,$(1),$(2)) | xargs -I ID docker inspect -f '$(3)' ID)
filter_repo_tags = $(if $(findstring docker.io,$(1)),$(subst docker.io/,,$(1))[^[:space:]|\$$]*,$(1)[^[:space:]|\$$]*)
get_repo_tags = $$(echo $(call get_image_id,$(1),$(2)) | xargs -I ID docker inspect -f '{{range .RepoTags}}{{.}} {{end}}' ID | grep -oh "$(call filter_repo_tags,$(3))" | xargs)

# Service health functions
# Syntax: $(call check_service_health,<docker-compose-environment>,<service-name>)
get_service_health = $$(echo $(call get_container_state,$(1),$(2),{{if .State.Running}}{{ .State.Health.Status }}{{end}}))
check_service_health = { \
  until [[ $(call get_service_health,$(1),$(2)) != starting ]]; \
    do sleep 1; \
  done; \
  if [[ $(call get_service_health,$(1),$(2)) != healthy ]]; \
    then echo $(2) failed health check; exit 1; \
  fi; \
}