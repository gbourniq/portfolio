version: "3.5"

services:

  nginx:
    image: nginx:1.17-alpine
    container_name: nginx
    restart: always
    # volumes: 
        # - ../docker-deployment/nginx/conf.d:/etc/nginx/conf.d
        # - /data/staticfiles:/www/staticfiles/
        # - /data/mediafiles:/www/mediafiles/
        # - /data/certs:/etc/nginx/certs
    healthcheck:
      test: stat /etc/nginx/conf.d/default.conf && nginx -t || exit 1
      interval: 60s
      timeout: 10s
      retries: 5
    ports: 
      - "80:80"
      - "443:443"
    networks:
      - proxy

  app:
    build:
      context: ../..
      dockerfile: deployment/build-images/app.dockerfile
      args:
        app_component : "backend-app"
        app_debug: ${DEBUG}
    container_name: app
    restart: always
    environment:
      DEBUG: ${DEBUG}
      ALLOWED_HOSTS: "*"
      SECRET_KEY: ${SECRET_KEY}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
    volumes:
      - ../docker-deployment/app/:/code/entrypoints/
      # - /data/staticfiles:/code/staticfiles/
      # - /data/mediafiles:/code/mediafiles/
      # - /data/redisdata:/data
    healthcheck:
      test: curl -f -s -S http://localhost:8080 || exit 1
      interval: 30s
      timeout: 30s
      retries: 5
    expose: 
      - 8080
    networks:
      - backend
      - proxy
    entrypoint:
      - ./entrypoints/run_server.sh

  worker:
    build:
      context: ../..
      dockerfile: deployment/build-images/app.dockerfile
      args:
        app_component : "backend-worker"
        app_debug: ${DEBUG}
    container_name: worker
    restart: always
    environment:
      DEBUG: ${DEBUG}
      ALLOWED_HOSTS: "*"
      SECRET_KEY: ${SECRET_KEY}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
    volumes:
      - ../docker-deployment/app/:/code/entrypoints/
      # - /data/staticfiles:/code/staticfiles/
      # - /data/mediafiles:/code/mediafiles/
      # - /data/redisdata:/data
    healthcheck:
      test: ps | grep celery || exit 1
      interval: 30s
      timeout: 30s
      retries: 5
    expose: 
      - 8080
    networks:
      - backend
      - proxy
    entrypoint:
      - ./entrypoints/run_celery.sh


  postgres:
    image: postgres:12-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "myportfoliodb"
      POSTGRES_INITDB_ARGS: "--encoding='UTF-8'"
    volumes:
      - ../docker-deployment/postgres/config/postgres.conf:/etc/postgres/postgres.conf:ro
      - ../docker-deployment/postgres/docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/
      # - /data/pgdata:/var/lib/postgresql/data/ 
      # - /data/pglogs:/var/log/postgresql/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
    expose:
      - 5432
    networks:
      - backend

  redis:
    image: redis:alpine
    container_name: redis
    restart: "no"
    volumes:
      - ../docker-deployment/redis:/healthcheck/
      # - /data/redisdata:/data
    healthcheck:
      test: sh /healthcheck/redis_healthcheck.sh
      interval: 10s
      timeout: 5s
      retries: 10
    expose:
      - 6379
    networks:
      - backend


networks:
  backend:
    driver: bridge
  proxy:
    driver: bridge