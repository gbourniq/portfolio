version: "3.5"

services:

  nginx:
    image: docker.io/gbournique/myportfolio_nginx:latest
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
    volumes: 
        - static:/www/staticfiles/
        - media:/www/mediafiles/
        - /data/certs:/etc/nginx/certs
    healthcheck:
      test: stat /etc/nginx/conf.d/nginx.conf && curl localhost:443 || exit 1
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 20s
    ports: 
      # - "80:80"
      - "443:443"
    networks:
      - proxy
    depends_on:
      - app
      
  app:
    image: docker.io/gbournique/myportfolio_app:latest
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
    environment:
      DEBUG: ${DEBUG}
      ALLOWED_HOSTS: "*"
      SECRET_KEY: ${SECRET_KEY}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
    volumes:
      - static:/code/staticfiles/
      - media:/code/mediafiles/
      - redisdata:/data
    healthcheck:
      test: curl -f -s -S http://localhost:8080 || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - backend
      - proxy
    entrypoint:
      - ./run_server.sh
    depends_on:
      - postgres
      - redis

  postgres:
    image: docker.io/gbournique/myportfolio_postgres:latest
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
    volumes:
      - pgdata:/var/lib/postgresql/data/ 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - backend

  redis:
    image: docker.io/gbournique/myportfolio_redis:latest
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
    volumes:
      - redisdata:/data
    healthcheck:
      test: bash /usr/local/bin/run_redis_healthcheck.sh
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - backend


  celery:
    image: docker.io/gbournique/myportfolio_celery:latest
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
    environment:
      DEBUG: ${DEBUG}
      ALLOWED_HOSTS: "*"
      SECRET_KEY: ${SECRET_KEY}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
    volumes:
      - static:/code/main/static/
      - media:/code/main/mediafiles/
      - redisdata:/data
    healthcheck:
      test: ps | grep celery || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - backend
      - proxy
    entrypoint:
      - ./run_celery.sh
    depends_on:
      - postgres
      - redis

volumes:
  static:
  media:
  pgdata:
  redisdata:

networks:
  backend:
    driver: overlay
  proxy:
    driver: overlay