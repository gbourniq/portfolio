version: "3.5"

services:

  app:
    image: ${IMAGE_REPOSITORY:?}:latest
    container_name: app
    restart: "no"
    environment:
      # Settings.py
      PYTHONPATH: ${DOCKER_PORTFOLIO_HOME:?}
      SECRET_KEY: ${SECRET_KEY:?}
      LOGGING_ENABLED: ${LOGGING_ENABLED:?}
      # Postgres
      POSTGRES_DB: ${POSTGRES_DB:?}
      POSTGRES_USER: ${POSTGRES_USER:?}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?}
      POSTGRES_HOST: ${POSTGRES_HOST:?}
      POSTGRES_PORT: ${POSTGRES_PORT:?}
      # Redis
      REDIS_HOST: ${REDIS_HOST:?}
      REDIS_PORT: ${REDIS_PORT:?}
      # Email Contact page
      EMAIL_HOST_USER: ${EMAIL_HOST_USER:?}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD:?}
      # aws s3 - should be docker/k8s secret
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:?}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:?}
      AWS_STORAGE_BUCKET_NAME: ${AWS_STORAGE_BUCKET_NAME:?}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:?}
    volumes:
      - staticfiles:${DOCKER_APP_CODE:?}/staticfiles/
      - mediafiles:${DOCKER_APP_CODE:?}/mediafiles/
      - redisdata:/data
      - ./app/dev.startup_server.sh:${DOCKER_APP_CODE}/dev.startup_server.sh
    healthcheck:
      test: curl -f -s -S http://localhost:8080 || exit 1
      interval: 30s
      timeout: 120s
      retries: 10
    expose: 
      - 8080
    # comment ports if used with nginx (production)
    ports: 
      - "8080:8080"
    networks:
      - backend
      - proxy
    entrypoint:
      - ${DOCKER_APP_CODE:?}/dev.startup_server.sh
    depends_on:
      - postgres
      - redis

  worker:
    image: ${IMAGE_REPOSITORY:?}:latest
    container_name: worker
    restart: "no"
    environment:
      # Settings.py
      PYTHONPATH: ${DOCKER_PORTFOLIO_HOME:?}
      SECRET_KEY: ${SECRET_KEY:?}
      LOGGING_ENABLED: ${LOGGING_ENABLED:?}
      # Postgres
      POSTGRES_DB: ${POSTGRES_DB:?}
      POSTGRES_USER: ${POSTGRES_USER:?}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?}
      POSTGRES_HOST: ${POSTGRES_HOST:?}
      POSTGRES_PORT: ${POSTGRES_PORT:?}
      # Redis
      REDIS_HOST: ${REDIS_HOST:?}
      REDIS_PORT: ${REDIS_PORT:?}
      # Email Contact page
      EMAIL_HOST_USER: ${EMAIL_HOST_USER:?}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD:?}
      # aws s3 - should be docker/k8s secret
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:?}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:?}
      AWS_STORAGE_BUCKET_NAME: ${AWS_STORAGE_BUCKET_NAME:?}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:?}
    volumes:
      - staticfiles:${DOCKER_APP_CODE:?}/staticfiles/
      - mediafiles:${DOCKER_APP_CODE:?}/mediafiles/
      - redisdata:/data
      - ./app/startup_celery.sh:${DOCKER_APP_CODE}/startup_celery.sh
    healthcheck:
      test: ps | grep celery || exit 1
      interval: 30s
      timeout: 120s
      retries: 10
    expose: 
      - 8081
    networks:
      - backend
      - proxy
    entrypoint:
      - ${DOCKER_APP_CODE:?}/startup_celery.sh

  postgres:
    image: postgres:12-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:?}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?}
      POSTGRES_DB: ${POSTGRES_DB:?}
      POSTGRES_INITDB_ARGS: "--encoding='UTF-8'"
    volumes:
      - ./postgres/config/postgres.conf:/etc/postgres/postgres.conf:ro
      - ./postgres/docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/
      - pgdata:/var/lib/postgresql/data/ 
      - pglogs:/var/lib/postgresql/pglogs/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 20s
      timeout: 20s
      retries: 10
    expose:
      - 5432
    networks:
      - backend

  redis:
    image: redis:alpine
    container_name: redis
    restart: "no"
    volumes:
      - ./redis:/healthcheck/
      - redisdata:/data
    healthcheck:
      test: sh /healthcheck/redis_healthcheck.sh
      interval: 20s
      timeout: 20s
      retries: 10
    expose:
      - 6379
    networks:
      - backend


volumes:
  staticfiles:
  mediafiles:
  redisdata:
  pgdata:
  pglogs:

networks:
  backend:
    driver: bridge
  proxy:
    driver: bridge