# ----------------------------------------------------
#
# Sourcing environment variables used for deployment (prod)
#
# ----------------------------------------------------
if [ -f ./deployment/.env ]; then
    source ./deployment/.env
else
    echo ">>> ERROR: ./deployment/.env not found! Aborting."
fi
# Override build type
export BUILD=dev


# GENERAL SETTINGS
# ----------------------------------------------------
export BAREMETAL_DEPLOYMENT=False
export RUN_ANSIBLE_PLAYBOOK=False
export CONDA_ENV_NAME=portfolio
export PORTFOLIO_REPO_HOME="$PWD"  # <-- should be base of repository
export PYTHONPATH="$PORTFOLIO_REPO_HOME:$PYTHONPATH"


# SECRET ENVIRONMENT VARIABLES to be defined on host
# ----------------------------------------------------
# AWS credentials for docker_deploy tarball upload, postgres backup, and django staticfiles
#   > AWS_ACCESS_KEY_ID
#   > AWS_SECRET_ACCESS_KEY
# Docker credentials to push app docker image to Dockerhub
#   > DOCKER_USER
#   > DOCKER_PASSWORD
# Ansible variables to run CD pipeline on AWS EC2 instance
#   > ANSIBLE_VAULT_PASSWORD
#   > ANSIBLE_SSH_PASSWORD


# ----------------------------------------------------
#
# DJANGO SETTINGS.PY
#
# ----------------------------------------------------
# This section overrides the following Django settings
export DEBUG=True

# Override storage strategy for Django static and media files
# False -> stored on the host, and staticfiles/mediafiles volumes must be enabled for docker deployment
# True -> stored at {AWS_STORAGE_BUCKET_NAME}/static
export S3_STORAGE_ENABLED=True

if [ "$BAREMETAL_DEPLOYMENT" == True ]; then
    echo "> POSTGRES_HOST=localhost for baremetal deployment."
    export POSTGRES_HOST=localhost
    export REDIS_HOST=
fi


# ----------------------------------------------------
#
# AWS
#
# ----------------------------------------------------
export DOCKER_DEPLOY_FOLDER=docker_deploy_tarballs
export S3_DOCKER_DEPLOY_URI=${S3_BASE_URI}/${DOCKER_DEPLOY_FOLDER}

# Name of the docker deploy tarball (without extension) 
# used by CD pipeline:
export S3_DOCKER_DEPLOY_TARBALL_CD_PIPELINE=docker_deploy_cd_pipeline
# used by `make docker-deploy-tarball-custom`:
export S3_DOCKER_DEPLOY_TARBALL_CUSTOM=docker_deploy_gbournique_01_05_2020


# ----------------------------------------------------
#
# DOCKER
#
# ----------------------------------------------------
# Build ${IMAGE_REPOSITORY} docker image
export POETRY_VERSION=1.0.5
export DOCKERFILE_PATH=deployment/docker-build/app.Dockerfile


# ----------------------------------------------------
#
# ANSIBLE
#
# ----------------------------------------------------
if [ "$RUN_ANSIBLE_PLAYBOOK" == True ]; then

    # Instance
    export ANSIBLE_INSTANCE_ID=i-052aaf7c90e2923f3
    export ANSIBLE_HOST_IP=18.132.30.8
    export ANSIBLE_HOST_NAME=gbournique.com
    export ANSIBLE_HOST_PUBLIC_DNS=ec2-18-132-30-8.eu-west-2.compute.amazonaws.com
    
    # For Travis CI to prevent host key checking
    export ANSIBLE_HOST_KEY_CHECKING=False

    # For ansible roles
    export PORTFOLIO_ROOT_DIR=/home/ubuntu/portfolio

    # SSL private key and certificate for nginx
    export SSL_CERT_S3_OBJECT_PATH=ssl_certs/cert_chain.crt
    export SSL_CERT_HOST_PATH=${PORTFOLIO_ROOT_DIR}/deployment/docker-deployment/nginx/certs/cert_chain.crt
    export SSL_KEY_S3_OBJECT_PATH=ssl_certs/www_gbournique_com.key
    export SSL_KEY_HOST_PATH=${PORTFOLIO_ROOT_DIR}/deployment/docker-deployment/nginx/certs/www_gbournique_com.key

    # Slack notification when app is up
    # Note QA_INSTANCE_TIME_MINUTES must be < 10mn (Travis limitation)
    export QA_INSTANCE_TIME_MINUTES=5
    export SLACK_TOKEN=T011F2R0WMA/B011F2YNEDS/W4CTrFJ2VGXeE84pAqwUUzi9
fi


# ----------------------------------------------------
echo "> ./.dev.env has been sourced."


# Validate dev environment variables are set
# ----------------------------------------------------
source ./scripts/env_validation.sh