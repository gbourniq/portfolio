#### STANDARD SETTINGS ####

PROJECT_NAME := myfullstackapp
BUILD_ID := ""
DC_PROJECT_NAME := $(PROJECT_NAME)$(BUILD_ID)

# Docker Compose Project Name and File Path for Build release
BUILD_COMPOSE_FILE := docker-build-images/build/docker-compose.yml
BUILD_ARGS = -p $(DC_PROJECT_NAME) -f $(BUILD_COMPOSE_FILE)

# Docker Compose Project Name and File Path for Prod release
PROD_COMPOSE_FILE := docker-build-images/prod/docker-compose.yml
PROD_ARGS = -p $(DC_PROJECT_NAME) -f $(PROD_COMPOSE_FILE)

# ECR parameters
# AWS_ACCOUNT_ID := 684585179542
# export DOCKER_REGISTRY := $(AWS_ACCOUNT_ID).dkr.ecr.eu-west-3.amazonaws.com
# DOCKER_LOGIN_EXPRESSION := eval $$(aws ecr get-login --registry-ids $(AWS_ACCOUNT_ID) --no-include-email)

# Set shell
SHELL=/bin/bash -e -o pipefail

# Cosmetics
RED := "\e[1;31m"
YELLOW := "\e[1;33m"
GREEN := "\033[32m"
NC := "\e[0m"
INFO := @bash -c 'printf $(YELLOW); echo "=> $$1"; printf $(NC)' MESSAGE
SUCCESS := @bash -c 'printf $(GREEN); echo "[SUCCESS] $$1"; printf $(NC)' MESSAGE
WARNING := @bash -c 'printf $(RED); echo "[WARNING] $$1"; printf $(NC)' MESSAGE

# App version settings
COMMIT_TIMESTAMP := $(shell echo $$(git log -1 --pretty='format:%cd' --date='format:%Y%m%d%H%M%S' 2>/dev/null))
COMMIT_ID := $(shell echo $$(git rev-parse --short HEAD 2>/dev/null))
COMMIT_TAG := $(shell echo $$(git tag --points-at HEAD 2>/dev/null))
export APP_VERSION ?= $(COMMIT_TIMESTAMP).$(COMMIT_ID)$(if $(BUILD_ID),.$(BUILD_ID),)

# Docker host settings
DOCKER_HOST_IP := $(shell echo $$DOCKER_HOST | awk -F/ '{printf $$3}' | awk -F: '{printf $$1}')
DOCKER_HOST_IP := $(if $(DOCKER_HOST_IP),$(DOCKER_HOST_IP),localhost)

# Service health functions
# Syntax: $(call check_service_health,<docker-compose-environment>,<service-name>)
get_service_health = $$(echo $(call get_container_state,$(1),$(2),{{if .State.Running}}{{ .State.Health.Status }}{{end}}))
check_service_health = { \
  until [[ $(call get_service_health,$(1),$(2)) != starting ]]; \
    do sleep 1; \
  done; \
  if [[ $(call get_service_health,$(1),$(2)) != healthy ]]; \
    then echo $(2) failed health check; exit 1; \
  fi; \
}

# Dangling image function
# Syntax: $(call clean_dangling_images,<repository>)
clean_dangling_images = docker images -q -f dangling=true -f label=application=$(1) | xargs -I ARGS docker rmi -f ARGS || true

# Port introspection functions
# Syntax: $(call get_port_mapping,<docker-compose-environment>,<service-name>,<internal-port>)
get_raw_port_mapping = $$(docker-compose $(1) ps -q $(2) | xargs -I ID docker port ID $(3))
get_port_mapping = $$(echo $$(IFS=':' read -r -a array <<< "$(call get_raw_port_mapping,$(1),$(2),$(3))" && echo "$${array[1]}"))

# Tagging and Publishing functions
# Syntax: $(call tag_image,<docker-compose-environment>,<service-name>,<fully-qualified-tag>)
# Syntax: $(call publish_image,<docker-compose-environment>,<service-name>,<fully-qualified-repository>)
tag_image = $$(echo $(call get_image_id,$(1),$(2)) | xargs -I ARG docker tag ARG $(3);)
publish_image = { \
	for tag in $(call get_repo_tags,$(1),$(2),$(3)); \
		do echo $$tag | xargs -I TAG docker push TAG; \
	done; \
}

# Image and Repository Tag introspection functions
# Syntax: $(call get_image_id,<docker-compose-environment>,<service-name>)
# Syntax: $(call get_repo_tags,<docker-compose-environment>,<service-name>,<fully-qualified-image-name>)
get_container_id = $$(docker-compose $(1) ps -q $(2))
get_image_id = $$(echo $(call get_container_id,$(1),$(2)) | xargs -I ARGS docker inspect -f '{{ .Image }}' ARGS)
get_container_state = $$(echo $(call get_container_id,$(1),$(2)) | xargs -I ID docker inspect -f '$(3)' ID)
filter_repo_tags = $(if $(findstring docker.io,$(1)),$(subst docker.io/,,$(1))[^[:space:]|\$$]*,$(1)[^[:space:]|\$$]*)
get_repo_tags = $$(echo $(call get_image_id,$(1),$(2)) | xargs -I ID docker inspect -f '{{range .RepoTags}}{{.}} {{end}}' ID | grep -oh "$(call filter_repo_tags,$(3))" | xargs)


# Customising value in yml
# Syntax: $(call populate_yml,<unique-key>,<value>,<file-path>)
populate_yml = sed -i "" "/^\([[:space:]]*$(2): \).*/s//\1$(3)/" $(1) | echo Populating $(2) with $(3)

# Exit code function
# Syntax: $(call get_exit_code,<docker-compose-environment>,<service-name>)
get_exit_code = $$(echo $(call get_container_state,$(1),$(2),{{ .State.ExitCode }}))
check_exit_code = exit $(call get_exit_code,$(1),$(2))