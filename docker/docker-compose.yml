version: "3.7"

services:

  nginx:
    restart: always
    build:
      context: ../
      dockerfile: docker/build/nginx.dockerfile
    container_name: nginx
    volumes: 
        - static:/code/main/static/
    ports: 
      - "1221:80"
    networks:
      - proxy
    depends_on:
      - app
      
  app:
    build:
      context: ../
      dockerfile: docker/build/app.dockerfile
    container_name: app
    volumes:
      - static:/code/main/static/
      - redisdata:/data
    depends_on:
      - postgres
      - redis
      # - rabbitmq
    networks:
      - backend-db
      - backend-redis
      - proxy
    env_file:
      - ./build/env/app.dev.env
    expose: 
      - 8080

  postgres:
    build:
      context: ../
      dockerfile: docker/build/postgres.dockerfile
    container_name: postgres
    restart: unless-stopped
    expose:
      - "5432"
    volumes:
      - pgdata:/var/lib/postgresql/data/ 
    env_file:
      - ./build/env/postgres.env
    networks:
      - backend-db

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379"
    volumes:
      - redisdata:/data
    networks:
      - backend-redis

  # # RabbitMQ
  # rabbitmq:
  #   hostname: rabbit
  #   image: rabbitmq:3.6.0
  #   environment:
  #     - RABBITMQ_DEFAULT_USER=admin
  #     - RABBITMQ_DEFAULT_PASS=mypass
  #   ports:
  #     - "5672:5672"  # we forward this port because it's useful for debugging
  #     - "15672:15672"  # here, we can access rabbitmq management plugin

  # # Celery worker
  # worker:
  #   build:
  #     context: ../
  #     dockerfile: docker/build/app.dockerfile
  #   container_name: celery_1
  #   volumes:
  #     - static:/code/main/static/
  #   depends_on:
  #     - postgres
  #     - redis
  #     - rabbitmq
  #   networks:
  #     - backend-db
  #     - backend-redis
  #   env_file:
  #     - ./build/env/app.dev.env
  #   entrypoint:
  #     - ./run_celery.sh


volumes:
  static:
  pgdata:
  redisdata:

networks:
  backend-db:
    driver: bridge
  backend-redis:
    driver: bridge
  proxy:
    driver: bridge